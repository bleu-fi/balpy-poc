from enum import Enum

from balpy.chains import Chain
from balpy.core.lib.web3_provider import Web3Provider

web3 = Web3Provider.get_instance()


class Event(Enum):
    SwapFeePercentageChanged = "SwapFeePercentageChanged"
    AmpUpdateStarted = "AmpUpdateStarted"
    AmpUpdateStopped = "AmpUpdateStopped"
    PoolCreated = "PoolCreated"
    NewSwapFeePercentage = "NewSwapFeePercentage"
    # Transfer = "Transfer"


EVENT_TYPE_TO_UNHASHED_SIGNATURE = {
    Event.SwapFeePercentageChanged: "SwapFeePercentageChanged(uint256)",  # swapFeePercentage
    Event.AmpUpdateStarted: "AmpUpdateStarted(uint256,uint256,uint256,uint256)",  # startValue, endValue, startTime, endTime
    Event.AmpUpdateStopped: "AmpUpdateStopped(uint256)",  # currentValue
    Event.PoolCreated: "PoolCreated(address)",  # poolAddress
    Event.NewSwapFeePercentage: "NewSwapFeePercentage(address,uint256)",  # poolAddress, swapFeePercentage
    # # Event.Transfer: "Transfer(address,address,uint256)",  # from, to, amount -- used for testing
}

EVENT_TYPE_TO_SIGNATURE = {
    event_name: web3.keccak(text=text_sig).hex()
    for event_name, text_sig in EVENT_TYPE_TO_UNHASHED_SIGNATURE.items()
}

EVENT_TYPE_TO_PARAMS = {
    Event.SwapFeePercentageChanged: ["swapFeePercentage"],
    Event.AmpUpdateStarted: ["startValue", "endValue", "startTime", "endTime"],
    Event.AmpUpdateStopped: ["currentValue"],
    Event.NewSwapFeePercentage: ["_address", "_fee"],
    # Event.Transfer: ["amount"],  # used for testing
}

EVENT_TYPE_TO_INDEXED_PARAMS = {
    # Event.Transfer: ["from", "to"],  # used for testing
    Event.PoolCreated: ["pool_id"],
}

SIGNATURE_TO_EVENT_TYPE = {v: k for k, v in EVENT_TYPE_TO_SIGNATURE.items()}

NOTIFICATION_CHAIN_MAP = {
    Chain.mainnet: "https://silent-floral-general.discover.quiknode.pro/4db24b930f19041c6cf3ea1c2eac8e1a93d14f34/",
    Chain.polygon: "https://polygon-mainnet.g.alchemy.com/v2/pNHndmkCUlO4FZTLJSRUCcGKVFXumFuJ",
    Chain.polygon_zkevm: f"https://polygonzkevm-mainnet.g.alchemy.com/v2/v7Ec47UcoFB1V_I_SZcke638RNmLw9EM",
    Chain.arbitrum: "https://arb-mainnet.g.alchemy.com/v2/I9zUuFx228-1hzJKoHEfeJyljBn2Wl5I",
    Chain.optimism: "https://opt-mainnet.g.alchemy.com/v2/CLaPrMa_bTgusPZ1PArSMfBiFxJvk9Ih",
    # Chain.avalanche: "https://avalanche-mainnet.g.alchemy.com/v2/ODJ9G5Ipv-Hb2zTWMNbUFIqv9WtqBOc2",
    # Chain.gnosis: "https://cold-distinguished-flower.xdai.discover.quiknode.pro/5f4c5be01473071025287547002d3016b31860a8", # generated by us
    # Chain.base: ""
}
